# ---------------------------------------------------------
# Extended IOU Tracker
# Copyright (c) 2019 HS Fulda, Elektrotechnik
# Licensed under The MIT License [see LICENSE for details]
# ---------------------------------------------------------
import cv2
import os
from time import time
from util import load_mot, iou, get_template, template_matching

from KCF import kcftracker


def track_ext_iou(detections, sigma_l, sigma_h, sigma_ext_iou, t_min, weight_iou, ttl_vtracking, img_path):
    """
    Extended IOU tracker by visual informations.

    Args:
         detections (list): list of detections per frame, usually generated by util.load_mot
         sigma_l (float): low detection threshold.
         sigma_h (float): high detection threshold.
         sigma_ext_iou (float): Extended IOU threshold.
         t_min (float): minimum track length in frames.
         weight_iou (float): weighting between iou and template matching scores
         ttl_vtracking (float): maximum length of visual track (amount of framess)
         img_path (string): image directory

    Returns:
        list: list of tracks.
    """

    tracks_active = []
    tracks_finished = []
    trackers = []

    for frame_num, detections_frame in enumerate(detections, start=1):
        # apply low threshold to detections
        dets = [det for det in detections_frame if det['score'] >= sigma_l]

        # read image
        frame = cv2.imread(os.path.join(img_path, str(frame_num).zfill(6)+".jpg"), cv2.IMREAD_COLOR)
        
        updated_tracks = []
        for track in tracks_active:
            if len(dets) > 0:
                # get det with highest iou
                best_match_iou = max(dets, key=lambda x: iou(track['bboxes'][-1], x['bbox']))
                # template matching
                template  = get_template(previous_frame, track['bboxes'][-1])
                matched_template = template_matching(frame, template, track['bboxes'][-1], factor=0.1, meth_idx=5) 
                
                if (weight_iou * iou(track['bboxes'][-1], best_match_iou['bbox'])) + ((1 - weight_iou) * matched_template['score']) >= sigma_ext_iou:
                    # Evtl. Zeile drunter anpassen mit gemittelter bounding box aus iou und tm oder Ã¤hnliches!
                    track['bboxes'].append(best_match_iou['bbox'])
                    track['max_score'] = max(track['max_score'], best_match_iou['score'])

                    updated_tracks.append(track)

                    # remove from best matching detection from detections
                    del dets[dets.index(best_match_iou)]

            # if track was not updated
            if len(updated_tracks) == 0 or track is not updated_tracks[-1]:
                # Start visual tracking!!!
                # finish track when the conditions are met
                if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min:
                    tracks_finished.append(track)

        # create new tracks
        new_tracks = [{'bboxes': [det['bbox']], 'max_score': det['score'], 'start_frame': frame_num} for det in dets]
        tracks_active = updated_tracks + new_tracks
        
        previous_frame = frame

    # finish all remaining active tracks
    tracks_finished += [track for track in tracks_active
                        if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min]

    return tracks_finished


def track_iou_matlab_wrapper(detections, sigma_l, sigma_h, sigma_iou, t_min):
    """
    Matlab wrapper of the iou tracker for the detrac evaluation toolkit.

    Args:
         detections (numpy.array): numpy array of detections, usually supplied by run_tracker.m
         sigma_l (float): low detection threshold.
         sigma_h (float): high detection threshold.
         sigma_iou (float): IOU threshold.
         t_min (float): minimum track length in frames.

    Returns:
        float: speed in frames per second.
        list: list of tracks.
    """

    detections = detections.reshape((7, -1)).transpose()
    dets = load_mot(detections)
    start = time()
    tracks = track_iou(dets, sigma_l, sigma_h, sigma_iou, t_min)
    end = time()

    id_ = 1
    out = []
    for track in tracks:
        for i, bbox in enumerate(track['bboxes']):
            out += [float(bbox[0]), float(bbox[1]), float(bbox[2] - bbox[0]), float(bbox[3] - bbox[1]),
                    float(track['start_frame'] + i), float(id_)]
        id_ += 1

    num_frames = len(dets)
    speed = num_frames / (end - start)

    return speed, out
